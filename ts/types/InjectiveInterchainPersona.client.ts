/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Chain, Wallet, QueryMsg } from "./InjectiveInterchainPersona.types";
export interface InjectiveInterchainPersonaReadOnlyInterface {
  contractAddress: string;
}
export class InjectiveInterchainPersonaQueryClient implements InjectiveInterchainPersonaReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
  }
}
export interface InjectiveInterchainPersonaInterface extends InjectiveInterchainPersonaReadOnlyInterface {
  contractAddress: string;
  sender: string;
  addWallet: ({
    wallet
  }: {
    wallet: Wallet;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeWallet: ({
    wallet
  }: {
    wallet: Wallet;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class InjectiveInterchainPersonaClient extends InjectiveInterchainPersonaQueryClient implements InjectiveInterchainPersonaInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addWallet = this.addWallet.bind(this);
    this.removeWallet = this.removeWallet.bind(this);
  }
  addWallet = async ({
    wallet
  }: {
    wallet: Wallet;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_wallet: {
        wallet
      }
    }, fee, memo, _funds);
  };
  removeWallet = async ({
    wallet
  }: {
    wallet: Wallet;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_wallet: {
        wallet
      }
    }, fee, memo, _funds);
  };
}